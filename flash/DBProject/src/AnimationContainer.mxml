<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" creationComplete="init()"
		 
		 >
	<fx:Script>
		<![CDATA[
			import br.com.stimuli.loading.loadingtypes.LoadingItem;
			
			import dragonBones.Armature;
			import dragonBones.events.FrameEvent;
			import dragonBones.factorys.BaseFactory;
			
			import mx.collections.ArrayCollection;
			
			import resources.BunchLoadingItem;
			import resources.ResourceManager;
			
			import spark.events.IndexChangeEvent;
			
			[Embed(source = "assets/Robot_output.swf", mimeType = "application/octet-stream")]  
			private static const RobotResourcesData:Class;
			
			[Embed(source = "assets/Boss1_output.swf", mimeType = "application/octet-stream")]  
			private static const BossResourcesData:Class;
			
			
		
			[Bindable]
			private var atackMovments:ArrayCollection;	
			
			
			private var atackerFactory:BaseFactory;
			private var defenderFactory:BaseFactory;
			private var atackRobotArmature:Armature;		
			private var atackRobot:Sprite;
			
			
			
			private var hitRobotArmature:Armature;		
			private var deathRobotArmature:Armature;
			
			private var _defendRobotArmature:Armature
			private var defendRobot:Sprite;
			
			
			
			protected function init():void
			{
				ResourceManager.instance = new DBResourceManager();
				loadResources();
				
				atackMovments = new ArrayCollection();
				atackerFactory = new BaseFactory(); 
				atackerFactory.parseData(new BossResourcesData());
				
				defenderFactory = new BaseFactory();
				defenderFactory.parseData(new RobotResourcesData());
				
				
				atackerFactory.addEventListener(Event.COMPLETE, textureCompleteHandler);
				
			}
			
			private function loadResources():void
			{
				var resources:Array = [];
				var assetsURL:String = 'assets/'
				addResource(resources, "assets/Robot_output.swf"); 
				for (var i:int = 0; i < 20; i++) 
				{
					addResource(resources, "assets/Boss1_output.swf"); 
				}
				
				ResourceManager.instance.loadBunch(resources, onResoursesLoadingProgress, onResoursesLoadingComplete,onResoursesLoadingError);
			}
			
			private function addResource(out:Array, url:String, shortId:String = null, preventCaching:Boolean = false,
										 isPost:Boolean = false, isBinary:Boolean = true, postData:Object = null):void{
				
				const data:URLVariables = new URLVariables();
				if (postData!=null){
					for(var key:String in postData)
						data[key] = postData[key];
				}
				const item:BunchLoadingItem = new BunchLoadingItem(url, shortId, preventCaching, isPost, isBinary, data);
				out.push(item);
			}
			
			private function onResoursesLoadingProgress(progres:Number):void
			{
				trace(progres);
			}
			
			private function onResoursesLoadingComplete():void
			{
				initResources();
			}
			
			private function onResoursesLoadingError(event:Event):void
			{
				initResources();
			}
			
			private function initResources():void
			{
				var item:LoadingItem = ResourceManager.instance.getLoadingItem('assets/Robot_output.swf');
			}
			
			
			
			private function textureCompleteHandler(event:Event):void
			{
				 
				
				hitRobotArmature = defenderFactory.buildArmature("Boss1/Hit");
				deathRobotArmature = defenderFactory.buildArmature("Boss1/Death");
				defendRobotArmature = hitRobotArmature;
				
				atackRobotArmature = atackerFactory.buildArmature("Atack");
				atackRobot = atackRobotArmature.display as Sprite;
				atackRobot.scaleX = -1;
				atackRobot.x= -300;
				atackRobot.y = 100;
				for each(var movement:String in atackRobotArmature.animation.movementList)
				{
					atackMovments.addItem(movement);
				}
				atackRobotContainer.addChild(atackRobot);
				atackRobotArmature.addEventListener(FrameEvent.MOVEMENT_FRAME_EVENT,collisionHandler)
				
				initAramatures();
				addEventListener(Event.ENTER_FRAME,enterframeHandler)
				
			}
			
			
			private function enterframeHandler(event:Event):void
			{
				atackRobotArmature.update();
				_defendRobotArmature.update();
			}
			
			
			protected function showAnimation(event:IndexChangeEvent):void
			{
				atackRobotArmature.animation.gotoAndPlay(animationsList.selectedItem);
				
			}
			
			private function collisionHandler(event:FrameEvent):void
			{
				if(event.frameLabel!='collision')
					return;
				_defendRobotArmature.animation.gotoAndPlay(event.movementID);
				//_defendRobotArmature.animation.timeScale = .5;
				//atackRobotArmature.animation.timeScale = .5;
			}
			
			
			private function initAramatures():void
			{
				atackRobotArmature.animation.gotoAndPlay('init');
				hitRobotArmature.animation.gotoAndPlay('init');
				deathRobotArmature.animation.gotoAndPlay('init');
				_defendRobotArmature.animation.timeScale = 1;
				atackRobotArmature.animation.timeScale = 1;
			}
			
			
			protected function collisionTypeChanged():void
			{
				defendRobotArmature = colType.selectedValue==1?hitRobotArmature:deathRobotArmature; 
				
			}
			
			public function set defendRobotArmature(value:Armature):void
			{
				_defendRobotArmature = value;
				if(defendRobot)
					defendRobotContainer.removeChild(defendRobot);
				defendRobot = value.display as Sprite;
				defendRobot.x= 60;
				defendRobot.y = 100;
				defendRobotContainer.addChild(defendRobot);
			}

			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:RadioButtonGroup id="colType"
							itemClick="collisionTypeChanged()"/>
	</fx:Declarations>
	<s:HGroup>
		<s:Button label="reinit" click="initAramatures()"/>
		<s:DropDownList id="animationsList" dataProvider="{atackMovments}" change="showAnimation(event)"/>
		<s:Spacer width="10"/>
		<s:RadioButton label="hit"
					   value="1"
					   group="{colType}"/>
		<s:RadioButton label="death"
					   value="2"
					   group="{colType}"/>
	
	</s:HGroup>
	
	<s:SpriteVisualElement id="defendRobotContainer" x="500" y="400"/>
	<s:SpriteVisualElement id="atackRobotContainer" x="500" y="400"/>
	
</s:Group>
