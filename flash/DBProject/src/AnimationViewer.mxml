<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="init()">
	<fx:Script>
		<![CDATA[
			import br.com.stimuli.loading.loadingtypes.LoadingItem;
			
			import dragonBones.animation.WorldClock;
			
			import mx.collections.ArrayCollection;
			
			import resources.BunchLoadingItem;
			import resources.ResourceManager;
			
			import view.dollview.BossDoll;
			import view.dollview.DollBase;
			import view.dollview.RobotDoll;
			import view.dollview.events.DollAnimationEvent;
			import view.dollview.events.DollEvent;
			[Bindable]
			private var robotsResources:ArrayCollection;
			[Bindable]
			private var atacks:ArrayCollection;
			
			
			private var doll1:DollBase;
			private var doll2:DollBase;
			
			protected function init():void
			{
				robotsResources = new ArrayCollection();
				ResourceManager.instance = new DBResourceManager();
				loadResources();
				addEventListener(Event.ENTER_FRAME,onEnterFrame);
				
			}
			
			private function onEnterFrame(e:Event):void
			{
				WorldClock.clock.advanceTime(-1);
			}
			
			private function loadResources():void
			{
				var resources:Array = [];
				var assetsURL:String = 'assets/'
				addResource(resources, assetsURL+DollBase.ROBOT_TYPE+'_output.swf',DollBase.ROBOT_TYPE); 
				
				for (var i:int = 1; i < 20; i++) 
				{
					addResource(resources, assetsURL+DollBase.BOSS_TYPE+i+'_output.swf',DollBase.BOSS_TYPE+1)
				}
				
				ResourceManager.instance.loadBunch(resources, onResoursesLoadingProgress, onResoursesLoadingComplete,onResoursesLoadingError);
			}
			
			private function addResource(out:Array, url:String, shortId:String = null, preventCaching:Boolean = false,
										 isPost:Boolean = false, isBinary:Boolean = true, postData:Object = null):void{
				
				const data:URLVariables = new URLVariables();
				if (postData!=null){
					for(var key:String in postData)
						data[key] = postData[key];
				}
				const item:BunchLoadingItem = new BunchLoadingItem(url, shortId, preventCaching, isPost, isBinary, data);
				out.push(item);
			}
			
			private function onResoursesLoadingProgress(progres:Number):void
			{
				trace(progres);
			}
			
			private function onResoursesLoadingComplete():void
			{
				initResources();
			}
			
			private function onResoursesLoadingError(event:Event):void
			{
				initResources();
			}
			
			private function initResources():void
			{
				var item:LoadingItem = ResourceManager.instance.getLoadingItem(DollBase.ROBOT_TYPE);
				if(item&&item._isLoaded)
					robotsResources.addItem(item.id);
				
				for (var i:int = 0; i < 20; i++) 
				{
					item = ResourceManager.instance.getLoadingItem(DollBase.BOSS_TYPE+i);
					if(item&&item._isLoaded)
						robotsResources.addItem(item.id);
				}
				
				
			}
			
			
			
			protected function selectRobot1():void
			{
				while(dollContainer1.numChildren>0)
				{
					doll1 = dollContainer1.getChildAt(0) as DollBase;
					doll1.dispose();
					doll1.removeEventListener(DollEvent.INITED,doll1Inited);
					doll1.removeEventListener(DollAnimationEvent.COLLIDE,handleAtackCollision);
					dollContainer1.removeChildAt(0);
				}
				
				var dollType:String = dolls1List.selectedItem;
				if(dollType==DollBase.ROBOT_TYPE)
				{
					doll1 = new RobotDoll(dollType);
				}
				else
				{
					doll1 = new BossDoll(dollType);
				}
				doll1.scaleX = -1;
				if(!doll1.inited)
					doll1.addEventListener(DollEvent.INITED,doll1Inited);
				else
					doll1Inited();
				
				doll1.addEventListener(DollAnimationEvent.COLLIDE,handleAtackCollision);
				dollContainer1.addChild(doll1);
			}
			
			
			
			private function doll1Inited(event:Event=null):void
			{
				setOpponents()
				doll1.setOpponent(DollBase.ROBOT_TYPE);
				atacks = (doll1 as RobotDoll).getAtacksList();
			}
			
			private function doll2Inited(event:Event=null):void
			{
				setOpponents();
				atacks = (doll1 as RobotDoll).getAtacksList();
			}
			
			
			private function atack():void
			{
				(doll1 as RobotDoll).showAtackAnimation(atacksList.selectedItem);
			}
			
			private function selectRobot2():void
			{
				while(dollContainer2.numChildren>0)
				{
					doll2 = dollContainer2.getChildAt(0) as DollBase;
					doll2.dispose();
					doll2.removeEventListener(DollEvent.INITED,doll2Inited);
					dollContainer2.removeChildAt(0);
				}
				
				var dollType:String = dolls2List.selectedItem;
				if(dollType==DollBase.ROBOT_TYPE)
				{
					doll2 = new RobotDoll(dollType);
				}
				else
				{
					doll2 = new BossDoll(dollType);
				}
				if(!doll2.inited)
					doll2.addEventListener(DollEvent.INITED,doll2Inited);
				else
					doll2Inited();
				dollContainer2.addChild(doll2);
			}
			
			private function setOpponents():void
			{
				if(!doll1||!doll2)
					return;
				if(!doll1.inited||!doll2.inited)
					return;
					
				doll1.setOpponent(doll2.type);
				doll2.setOpponent(doll1.type);
				
			}
			
			private function handleAtackCollision(event:DollAnimationEvent):void
			{
				if(!doll2)
					return;
				doll2.showAtackReactionAnimation(event.movementId,deathCheckbox.selected);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:HGroup>
		<s:SkinnableContainer backgroundColor="0x999999">
			<s:VGroup left="3" top="3">
				<s:Label text="Атакующий" fontSize="16" />
				<s:HGroup>
					<s:DropDownList id="dolls1List" dataProvider="{robotsResources}"
									change="selectRobot1()"/>
					<s:VGroup>
						<s:DropDownList id="atacksList" dataProvider="{atacks}"/>
						<s:Button label="atack" click="atack()"/>
					</s:VGroup>
				</s:HGroup>
			</s:VGroup>
		</s:SkinnableContainer>
		<s:SkinnableContainer backgroundColor="0x999999">
			<s:VGroup left="3" top="3">
				<s:Label text="Робот для битья" fontSize="16" />
				<s:HGroup>
					<s:DropDownList id="dolls2List" dataProvider="{robotsResources}"
									change="selectRobot2()"/>
				</s:HGroup>
				<s:CheckBox id="deathCheckbox" label="Смерть" selected="false" />
			</s:VGroup>
		</s:SkinnableContainer>
	</s:HGroup>
	<s:SpriteVisualElement id="dollContainer2" x="560" y="600"/>
	<s:SpriteVisualElement id="dollContainer1" x="200" y="600"/>
</s:Group>
