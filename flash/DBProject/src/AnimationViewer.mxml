<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="init()">
	<fx:Script>
		<![CDATA[
			import br.com.stimuli.loading.loadingtypes.LoadingItem;
			
			import dollview.*;
			import dollview.events.DollEvent;
			
			import mx.collections.ArrayCollection;
			
			import resources.BunchLoadingItem;
			import resources.ResourceManager;
			[Bindable]
			private var robotsResources:ArrayCollection;
			[Bindable]
			private var atacks:ArrayCollection;
			
			
			private var doll1:Doll;
			
			protected function init():void
			{
				robotsResources = new ArrayCollection();
				ResourceManager.instance = new DBResourceManager();
				loadResources();
				
			}
			
			private function loadResources():void
			{
				var resources:Array = [];
				var assetsURL:String = 'assets/'
				addResource(resources, assetsURL+Doll.ROBOT_TYPE+'_output.swf',Doll.ROBOT_TYPE); 
				
				for (var i:int = 1; i < 20; i++) 
				{
					addResource(resources, assetsURL+Doll.BOSS_TYPE+i+'_output.swf',Doll.BOSS_TYPE+1)
				}
				
				ResourceManager.instance.loadBunch(resources, onResoursesLoadingProgress, onResoursesLoadingComplete,onResoursesLoadingError);
			}
			
			private function addResource(out:Array, url:String, shortId:String = null, preventCaching:Boolean = false,
										 isPost:Boolean = false, isBinary:Boolean = true, postData:Object = null):void{
				
				const data:URLVariables = new URLVariables();
				if (postData!=null){
					for(var key:String in postData)
						data[key] = postData[key];
				}
				const item:BunchLoadingItem = new BunchLoadingItem(url, shortId, preventCaching, isPost, isBinary, data);
				out.push(item);
			}
			
			private function onResoursesLoadingProgress(progres:Number):void
			{
				trace(progres);
			}
			
			private function onResoursesLoadingComplete():void
			{
				initResources();
			}
			
			private function onResoursesLoadingError(event:Event):void
			{
				initResources();
			}
			
			private function initResources():void
			{
				var item:LoadingItem = ResourceManager.instance.getLoadingItem(Doll.ROBOT_TYPE);
				if(item)
					robotsResources.addItem(item.id);
				
				for (var i:int = 0; i < 20; i++) 
				{
					item = ResourceManager.instance.getLoadingItem(Doll.BOSS_TYPE+i);
					if(item)
						robotsResources.addItem(item.id);
				}
				
				
			}
			
			
			
			protected function selectRobot1():void
			{
				while(dollContainer1.numChildren>0)
				{
					doll1 = dollContainer1.getChildAt(0) as Doll;
					doll1.dispose();
					doll1.removeEventListener(DollEvent.INITED,dollInited);
					dollContainer1.removeChildAt(0);
				}
				
				var dollType:String = dollsList.selectedItem;
				if(dollType==Doll.ROBOT_TYPE)
				{
					doll1 = new RobotDoll(dollType);
				}
				else
				{
					doll1 = new BossDoll(dollType);
				}
				doll1.scaleX = -1;
				doll1.addEventListener(DollEvent.INITED,dollInited);
				dollContainer1.addChild(doll1);
				
			}
			
			private function dollInited(event:Event):void
			{
				var doll:Doll = event.currentTarget as Doll;
				atacks = doll.getAtacksList();
				
			}
				
			
			
			private function atack():void
			{
				doll1.atack(atacksList.selectedItem);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:HGroup>
		<s:DropDownList id="dollsList" dataProvider="{robotsResources}"
						change="selectRobot1()"/>
		<s:VGroup>
			<s:DropDownList id="atacksList" dataProvider="{atacks}"/>
			<s:Button label="atack" click="atack()"/>
		</s:VGroup>
	</s:HGroup>
	<s:SpriteVisualElement id="dollContainer1" x="200" y="600"/>
</s:Group>
